

class Solution {
    public boolean isPalindrome(String s) {
        int l=0;
        int r=s.length()-1;

        while(l<r){
            while(l<r && !Character.isLetterOrDigit(s.charAt(l))){
                l++;
            }

            while(l<r && !Character.isLetterOrDigit(s.charAt(r))){
                r--;
            }

            if(Character.toLowerCase(s.charAt(l)) != Character.toLowerCase(s.charAt(r))  ){
                return false;
            }
            l++;
            r--;
        }

        return true;
    }
}
----------------------------------------------------------------------------------------------------
Step 1: Understand the Problem

We need to check if a string is a palindrome:

Ignore cases (treat uppercase = lowercase).

Ignore all non-alphanumeric characters (punctuation, spaces, etc).

Palindrome means: reads the same forward and backward.

âœ… Example:
"A man, a plan, a canal: Panama" â†’ "amanaplanacanalpanama" â†’ Palindrome â†’ true.

ðŸ”¹ Step 2: Break into Subproblems

Filter the string â†’ Keep only letters & numbers.

Normalize case â†’ Convert everything to lowercase.

Check palindrome:

Compare first and last character, move inward (two-pointer method).

ðŸ”¹ Step 3: Plan Solutions
Approach A: Using Extra String

Build a new cleaned string:

Use regex or loop to keep only Character.isLetterOrDigit(c).

Convert to lowercase.

Reverse the cleaned string.

Compare original cleaned string with reversed one.
ðŸ‘‰ Easier to write, but uses O(n) extra space.

Approach B: Two Pointers (Efficient âœ…)

Set left = 0, right = s.length() - 1.

While left < right:

Move left forward until itâ€™s alphanumeric.

Move right backward until itâ€™s alphanumeric.

Compare s.charAt(left) and s.charAt(right) (in lowercase).

If mismatch â†’ return false.

Else move both pointers inward.

If all checks pass â†’ return true.
ðŸ‘‰ Space O(1), Time O(n).

ðŸ”¹ Step 4: Implement (Java â€“ Two Pointers)
public class ValidPalindrome {

    public static boolean isPalindrome(String s) {
        int left = 0, right = s.length() - 1;

        while (left < right) {
            // skip non-alphanumeric chars
            while (left < right && !Character.isLetterOrDigit(s.charAt(left))) {
                left++;
            }
            while (left < right && !Character.isLetterOrDigit(s.charAt(right))) {
                right--;
            }

            // compare ignoring case
            if (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) {
                return false;
            }

            left++;
            right--;
        }

        return true;
    }

    public static void main(String[] args) {
        System.out.println(isPalindrome("A man, a plan, a canal: Panama")); // true
        System.out.println(isPalindrome("race a car")); // false
        System.out.println(isPalindrome(" ")); // true
    }
}

ðŸ”¹ Step 5: Dry Run Example

s = "A man, a plan, a canal: Panama"

left=0 â†’ 'A' â†’ lowercase 'a'

right=29 â†’ 'a' â†’ lowercase 'a' â†’ match âœ…

Move inward â€¦ keeps matching â€¦ until left crosses right â†’ return true.

ðŸ”¹ Step 6: Complexity

Time: O(n) â†’ one pass over string.

Space: O(1) â†’ no extra storage.
-----------------------------------------------------------------------------------------------------
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

 

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.
Example 3:

Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.
 

Constraints:

1 <= s.length <= 2 * 105
s consists only of printable ASCII characters.
